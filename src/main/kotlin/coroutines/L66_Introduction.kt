package coroutines

import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

/**
 * Чтобы использовать внутри функции main функцию delay(), функция main предваряется
 * модификатором suspend. Модификатор suspend определяет функцию, которая может
 * приостановить свое выполнение и возобновить его через некоторый период времени.
 *
 * Сама функция delay() тоже является подобной функцией, которая определена с
 * модификатором suspend. А любая функция с модификатором suspend может вызываться
 * либо из другой функции, которая тоже имеет модификатор suspend, либо из корутины.
 *
 * Прежде всего для определения и выполнения корутины нам надо определить для нее
 * контекст, так как корутина может вызываться только в контексте корутины
 * (coroutine scope). Для этого применяется функция coroutineScope() - создает
 * контекст корутины. Кроме того, эта функция ожидает выполнения всех определенных
 * внутри нее корутин. Стоит отметить, что coroutineScope() может применяться только
 * в функции с модификатором suspend, коей является функция main.
 *
 * Сама корутина определяется и запускается с помощью построителя корутин - функции launch.
 *
 * Корутина не привязана к конкретному потоку. Она может быть приостановить
 * выполнение в одном потоке, а возобновить выполнение в другом.
 */
suspend fun main() {
    coroutineScope {
        launch {
            getString()
        }
        launch {
            for (i in 33..38) {
                print("$i ")
                delay(1200L)
            }
        }
        launch { getQuotes() }
        println("Start!")
    }
}

//Вынесение кода корутин в отдельную функцию.
suspend fun getQuotes() {
    var i = 0
    while (i < 16) {
        print("$i ")
        delay(500L)
        i++
    }
    println("getQuotes is stop!")
}

//Если delay нет, то suspend можно опустить.
fun getString() {
    for (i in 'a'..'c') {
        print("$i  ")
    }
}