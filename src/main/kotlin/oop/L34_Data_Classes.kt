package oop

/**
 * Иногда классы бывают необходимы только для хранения некоторых данных.
 * В Kotlin такие классы называются data-классы.
 * При компиляции такого класса компилятор автоматически добавляет в класс функции с определенной
 * реализацией, которая учитывает свойства класса, которые определены в первичном конструкторе:
 *
 * equals(): сравнивает два объекта на равенство
 *
 * hashCode(): возвращает хеш-код объекта
 *
 * toString(): возвращает строковое представление объекта
 *
 * copy(): копирует данные объекта в другой объект
 *
 * При этом чтобы класс определить как data-класс, он должен соответствовать ряду условий:
 * Первичный конструктор должен иметь как минимум один параметр
 * Все параметры первичного конструктора должны предваряться ключевыми словами val или var, то есть определять свойства
 * Свойства, которые определяются вне первичного конструктора, не используются в функциях toString, equals и hashCode
 * Класс не должен определяться с модификаторами open, abstract, sealed или inner.
 */
fun main() {
    val data = Data("Data", 11)
    println(data.toString())
    val data2 = Data2(11, 3)
    println(data2.toString())

    val data3 = Data3(12, 4)
    println(data3.toString())
    //Ниже пример копирования данных.
    val d3 = data3.copy(b = 5)//изменили только b.
    println(d3.toString())

    //Сравним на равенство объекты.
    println(data3.equals(d3))

    //Декомпозиция data-классов
    val(aa, bb) = d3//создали две переменные и их значения взяли из d3.
    println(aa)
    println(bb)
    val x = aa + 1
    println(x)
}

//Здесь если мы вызовем функцию toString(), то получим непонятные данные oop.Data@34c45dca.
class Data(val name: String, val age: Int)

//Для того чтобы получить значения свойств, нам нужно эту функцию - toString() переопределять.
class Data2(val a: Int, val b: Int) {
    override fun toString(): String {
        return "a = $a, b = $b"
    }
}

//У Data классов этого вообще делать не надо. Но если захотим другую реализацию, тогда можно и переопределить.
data class Data3(val a: Int, val b: Int)