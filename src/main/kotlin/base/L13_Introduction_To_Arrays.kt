package base

fun main() {
    val numbers: Array<Int>//Вот так можно объявить о создании массива целых чисел.
    numbers = arrayOf(2, 34, 21, 1)//А вот так указать сразу и количество элементов и их значения.
    for (n in numbers) {
        print("$n ")
    }
    println()

    //Если мы хотим создать массив из элементов значения которых изначально будет null.
    val arr = arrayOfNulls<Double>(4)
    println(arr[1])//Распечатаем второй элемент массива.

    //Если мы хотим создать массив из нескольких элементов, но с другим значением отличным от null, для всех элементов массива.
    val arr1 = Array(3){1}
    arr1[0] = 2//Изменим значение первого элемента массива.

    //Другой пример создания массива с заданным значением для его элементов, но заданных формулой.
    var i = 9
    val arr2 = Array(4) {i++ * 3}//Здесь как и в примере выше не нужно указывать - arr2: Array<Int>, компилятор сам догадается по значениям заданным для массива.
    for (a in arr2) {
        print("$a ")
    }
    println("Размер массива = ${arr2.size}.")//Распечатаем размер массива.
    println(27 in arr2)//Проверим наличие значения 22 в массиве.

    //Для более оптимальной работы программы для массивов с базовыми типами лучше использовать соответствующие массивы.
    //Массивы базовых типов.
    val arr3: IntArray = intArrayOf(2, 3, 4)
    println(arr3.size)
    var k = 3
    val arr4 = DoubleArray(5){--k * 0.1}
    for (f in arr4) {
        print("$f ")
    }
    println()
    val arr5 = doubleArrayOf(1.1, 0.3, 2.234)
    println(arr5[arr5.size - 1])
}