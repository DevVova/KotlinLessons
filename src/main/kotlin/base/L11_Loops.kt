package base

/**
 * Циклы представляют вид управляющих конструкций, которые позволяют в зависимости от определенных
 * условий выполнять некоторое действие множество раз.
 */

fun main() {

    //Пример простого цикла for.
    for (a in 1..4) {
        print("$a\t")
    }
    println()

    //Таблица умножения с использованием вложенного цикла.
    var c: Int
    for (a in 1..10) {
        for (b in 1..10) {
            c = b * a
            print("$c\t")
        }
        println()
    }

    //Цикл while.
    var i = 0
    var k: Int
    while (i < 5) {
        k = ++i
        print("$k, ")
    }
    println()

    //Цикл do while.
    i = 0
    do {
        print("$i ")//этот блок исполнится по любому.
        i++
    } while (i < 0)
    println()

    //Оператор continue прерывает действующий блок кода и переводит исполнение на следующую итерацию.
    i = 0
    do {
        ++i
        if (i == 5) continue
        print("$i ")//В итоге 5 не будет напечатано.
    } while (i < 10)
    println()

    //Оператор break прекращает действие цикла и выходит из него.
    for (a in 1..7) {
        if (a == 5) break
        print("$a-")//Будет напечатан ряд с 1 до 4 включительно.
    }
    println()

    //Пример как можно выйти из определённого цикла, если имеется вложенность нескольких циклов.
    var u: Int
    test@for (a in 22..24) {
        for (b in 1.. 3) {
            u = a * b
            if (b == 3) break@test//оператор break выйдет из цикла, предваряемого меткой test.
            print("$u:")
        }
    }
    println()

    //Пример функции расширения forEach. Она принимает функцию-коллбек, параметр которой представляет каждый элемент массива:
    var res: Int
    val arr = arrayOf(23, 3, 45)
    arr.forEach { a ->
        res = a * 5
        print("$res  ")
    }
    println()
}