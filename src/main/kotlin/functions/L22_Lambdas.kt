package functions

/**
 * Лямбда-выражения представляют небольшие кусочки кода, которые выполняют некоторые
 * действия. Фактически лямбды представляют сокращенную запись функций. При этом лямбды,
 * как и обычные и анонимные функции, могут передаваться в качестве значений переменным
 * и параметрам функции.
 */
fun main() {
    {println("Hello")}();//Можно вот так вызывать лямбду, но тогда в конце нужно ставить точку с запятой.
    val pr = {println("Hi!")}
    pr()
    pr()
    val rr = {a: Int, b: Int ->
        a * b
    }
    println(rr(66, 11));//И перед лямбдой нужно также ставить точку с запятой.
    {x: Int, y: Double ->
        println("$x * $y = ${x * y}")
        x * y
    }(22, 1.3);//Если лямбда-выражение многострочное, состоит из нескольких инструкций, то возвращается то значение, которое генерируется последней инструкцией.

    //Передача лямбды как аргумента в функцию.
    doOp2(2, 13) {a, b ->
        a * b * 99
    }//Здесь мы также можем опустить для a и b указание параметров. То есть не надо писать - a: Int, b: Int.
    //Кроме всего прочего мы здесь использовали трейлинг лямбду, то есть вынесли её за скобки, так как она являлась последним параметром функции.

    //Возвращение лямбда-выражения из функции.
    var resRes = selectIt(3)
    resRes(24, 12)
    resRes = selectIt(2)
    println(resRes(348, 77))
}

fun doOp2(x: Int, y: Int, op: (a: Int, b: Int) -> Int) {
    println(op(x, y))
}

fun selectIt(key: Int): (Int, Int) -> Int {
    return when(key) {
        1 -> {a, b -> a + b}
        2 -> {a, b -> a - b}
        3 -> {a, b ->
            println("${a * b}")
            a * b}
        else -> {_, _ -> 0}//Так указываются неиспользуемые параметры.
    }
}