package collections

/**
 * Коллекция Map представляет коллекцию объектов, где каждый элемент имеет ключ и сопоставляемое
 * с ним значение. При этом все ключи в коллекции являются уникальными. В отличие от List
 * и Set интерфейс Map не расширяет интерфейс Collection.
 *
 * Map представляет неизменяемую коллекцию, для создания которой применяется метод mapOf().
 */
fun main() {
    val myMap = mapOf(1 to 78, 4 to 34, 78 to 3)
    for (i in myMap) {
        if (i.key > 5) print("${i.value} ")
    }
    println()
    println(myMap[4])
    println(myMap.getOrDefault(5, "no key"))//Если элемента с ключом 5 не будет, то напечатается "no key".
    println(myMap.getOrElse(22) { 0 })
    println(myMap.containsKey(6))//Проверка если элемент с ключом 6.
    if (myMap.containsValue(34)) {
        for ((key, value) in myMap) {
            if (value == 34) {
                println(key)
                break
            }
        }
    }

                                          //MutableMap
    /**
     * Изменяемые коллекции представлены интерфейсом MutableMap, который расширяет
     * интерфейс Map. Для создания объекта MutableMap применяется функция mutableMapOf().
     *
     * Интерфейс MutableMap реализуется рядом коллекций:
     *
     * HashMap: простейшая реализация интерфейса MutableMap, не гарантирует порядок элементов
     * в коллекции. Создается функцией hashMapOf()
     *
     * LinkedHashMap: представляет комбинацию HashMap и связанного списка, создается функцией linkedMapOf()
     *
     * Связный список — это структура данных, состоящая из узлов, где каждый узел хранит
     * данные и ссылку на следующий узел. В отличие от массива, где элементы хранятся
     * в непрерывной области памяти, узлы связного списка могут находиться в разных местах
     * памяти, но связаны между собой с помощью указателей (ссылок).
     */
    val m1= mutableMapOf(4 to 23, 12 to 4, 22 to 387)
    val m2 = hashMapOf(23 to 2, 2 to 44, 5 to 1)//Не гарантирует порядок элементов.
    val m3 = linkedMapOf(3 to 45, 23 to 123, 67 to 8)
    println("$m1  $m2  $m3")

    m1[45] = 89//Вот так можно добавить элемент с ключом 45 и значением 89 или изменить элемент с указанным ключом.
    println(m1)
    m1.putAll(m2)//А так добавляем целую коллекцию.
    println(m1)
    m1.replace(12, 77)//Установка нового значения.
    println(m1)
    m1.remove(45)
    println(m1)
}