package collections

/**
 * В Kotlin последовательности (sequences) — это способ работы с коллекциями данных,
 * позволяющий выполнять операции лениво (т.е. отложено) и избегать промежуточных
 * коллекций. Они особенно полезны, когда нужно выполнять цепочки операций, таких
 * как фильтрация, преобразование и сортировка, на больших наборах данных.
 *
 * Основная разница между любой коллекцией и Sequence:
 *
 * Коллекции: Все операции (filter, map) выполняются сразу и создают промежуточные коллекции.
 * Это требует больше памяти и процессорного времени при работе с большими наборами данных.
 *
 * Sequence: Операции выполняются лениво, элемент за элементом, только когда вызывается
 * финальная операция (toList()). Это уменьшает количество временных объектов и улучшает
 * производительность при обработке больших данных.
 */
fun main() {
    val l = listOf(2, 33, 22, 1)
    val ll = l.filter { it in 12..38 }
        .map { it * 3 }//Здесь создаются две промежуточные коллекции: одна после фильтрации, другая после преобразования.
    println(ll)
    /**
     * Когда создается последовательность с помощью asSequence(), ни фильтрация, ни преобразование еще не выполнены.
     * Они выполнятся только тогда, когда вызовется конечная операция, например, toList().
     *
     * Операции фильтрации и преобразования выполняются лениво и последовательно для каждого элемента:
     * Берется первый элемент, проверяется, попадает ли он в диапазон 12..38. Если попадает, применяется
     * преобразование, и так для каждого элемента по очереди.
     *
     * Таким образом, итоговая коллекция получается только на момент вызова toList(): [165, 110].
     */
    val s = l.asSequence().filter { it in 12..38 }.map { it * 5 }
    println(s.toList())

    //Создание списка.
    val sequence = sequenceOf(4, 21, 9, 45, 3)
    println(sequence.joinToString())//Чтобы распечатать, нужно так писать.

    /**
     * Создание последовательности с помощью функции generateSequence:
     * generateSequence(seed) {nextValue}
     * seed — начальное значение (первый элемент последовательности).
     * nextValue — лямбда-функция, определяющая следующее значение на основе предыдущего.
     */
    val sequence2 = generateSequence(3) { if (it > 89) null else it * 2 }
    /**
     * Функция joinToString в Kotlin используется для объединения элементов коллекции
     * в строку с возможностью настройки разделителя, префикса, суффикса и других параметров.
     */
    val str = sequence2.joinToString(separator = " и ", limit = 3) { "Number $it"}
    println(str)
    println()

    //Создание последовательности с помощью функций yield() и yieldAll():
    var sequence3 = sequence {
        yield(2)
        yield(5)
    }
    println(sequence3.joinToString())

    sequence3 = sequence {
        var start  = 0
        while (start < 6) {
            yield(start)
            start++
        }
    }
    println(sequence3.joinToString())

    sequence3 = sequence { yieldAll(sequence2) }
    println(sequence3.joinToString())

    //Далее я не стал описывать все операции, которые можно проводить с последовательностями, их много и они как для коллекций почти такие же.
    //Самое важное, что можно из всего вынести внизу.
    val list = listOf(24, 5, 43, 22).asSequence().filter { it > 22 }.map { (it * 4) + 88 }.toList()
    println(list)
}